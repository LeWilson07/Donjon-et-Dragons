@startuml
skinparam style strictuml
left to right direction
skinparam linetype ortho
hide empty members

package doonjonEtDragon
{
    package classe
    {
        interface Classe{
            +DefinirCaracsBase(p:Personnage)
        }

        class Guerrier implements Classe{
            +DefinirCaracsBase(p:Personnage)
        }
        class Clerc implements Classe{
            +DefinirCaracsBase(p:Personnage)
        }
        class Magicien implements Classe{
            +DefinirCaracsBase(p:Personnage)
        }
        class Roublard implements Classe{
            +DefinirCaracsBase(p:Personnage)
        }
    }
    package entite
    {
        package monstre
        {
            abstract class Monstre extends doonjonEtDragon.entite.Entite
            {
                -m_espece : String
                -m_classeArmure : Integer
                -m_porteAttaque : Integer
                -m_num : Integer
                -+<<create>> Monstre(num : Integer, force : Integer,dexterite : Integer,initiative : Integer,pv : Integer, classArmure : Integer, porteAttaque : Integer,vitesse : Integer,symbole : String)
                +getClassArmure() : Integer
                +getDamage() : De
                +setDamage(damage : De)
                +getNum() : Integer
                +getPorteAttaque : Integer
                +getEspece : String
                +setEspece(espece : String)
                +RecevoirAttaqueDe(p:Personnage,degat : Integer)
                +RecevoirAttaqueDe(m:Monstre,degat : Integer)
                +attaquer(cible : Entite)
                +estVivant() : boolean
                +estUnPersonnage : boolean

            }
            class Bowser extends Monstre
            {
                +<<create>> Bowser(num : Integer)
            }
            class Dragon extends Monstre
            {
                +<<create>> Dragon(num : Integer)
            }
        }

        package personnage
        {
            class Personnage extends doonjonEtDragon.entite.Entite
            {
                -m_nom : String
                -m_pvInitial
                -m_isMagicien : boolean
                -m_isClerc : boolean
                +<<create>> Personnage(nom : String, race : Race ,classe : Classe,symbole : String)
                +loadState()
                +setSort(sort : Sort)
                +getSort() : Sort
                +getPvInitial() : integer
                +setIsMagicien(isMagicien : boolean)
                +setIsClerc(isClern : boolean)
                +IsMagicien : boolean
                +isClerc : boolean
                +getM_inventaireArme() : List<Arme>
                +getM_inventaireArmure() : List<Armure>
                +getM_nom() : String
                +getM_ArmeEquipe : Arme
                +LoadStatArmeEquipe()
                +getBonusArme() : integer
                +getDegatArme() : integer
                +EquiperArme(arme : Arme)
                +EquiperArmure(armure : Armure)
                +RamasserObjetsAuSol(x : Integer, y : Integer, donjon : Donjon)
                +Ramasser(arme : Arme)
                +Ramasser(armure : Armure)
                +EquiperObjetParNom(nomObjet : string)
                +getArmureEquipe() : Armure
                +RecevoirAttaqueDe(p : Personnage,degat : Integer)
                +RecevoirAttaqueDe(m : Monstre, degat : Integer)
                +attaquer (e : Entite)
                +infoEntite(e : Entite)
                +estVivant() : boolean
                +estunPersonnage() : boolean
                +AfficheInventaire()


            }
        }

        abstract Class Entite
        {
            -m_pv : Integer
            -m_force : Integer
            -m_dexterite : Integer
            -m_vitesse : Integer
            -m_initiative : Integer
            -m_x : Integer
            -m_y : Integer
            #m_symbole : String
            +<<create>> Entite()
            +<<create>> Entite(pv : integer, force : integer, dex : integer, vit : integer, init : integer,symbole : char)
            +setPv(pv : Integer)
            +setForce(force : Integer)
            +setDexterite(dexterite : Integer)
            +setVitesse(vitesse :Integer)
            +setInitiative(initiative : Integer)
            +setSymbole(symbole : String)
            +setX()
            +setY()
            +getPv() : Integer
            +getForce() : Integer
            +getDexterite() : Integer
            +getVitesse() : Integer
            +getInitiative() : Integer
            +getDe() : De
            +getX() : Integer
            +getY() : Integer
            +distance(x : Integer,y : Integer)
            +ConvertCoords(coord : String)
            +abstract  RecevoirAttaqueDe(p : Personnage,degat : Integer)
            +abstract RecevoirAttaqueDe(m : Monstre, degat : Integer)
            +abstract attaquer (e : Entite)
            +abstract infoEntite(e : Entite)
            +abstract estVivant() : boolean
            +abstract estunPersonnage() : boolean
            +seDeplacer(c : String,donjon : Donjon)
            +seDeplacer(c : String,donjon : Donjon)

        }
    }
    package equipement
    {
        package arme
        {
            class Arme extends doonjonEtDragon.equipement.Equipement
            {
            -m_porte : Integer
            -m_isGuerre : Integer
            +<<create>> Arme(nom : String,degat : De,porte : Integer,isGuerre : boolean)
            +getM_degats() : De
            +getM_porte : Integer
            +getM_nom : String
            +getM_isGuerre : Boolean
            }
            class ArbaleteLegere extends Arme
            {
                +<<create>> ArbaleteLegere()
            }
            class ArcCourt extends Arme
            {
                +<<create>> ArcCourt()
            }
            class Baton extends Arme
            {
                +<<create>> Baton()
            }
            class EpeeLongue extends Arme
            {
                +<<create>> EpeeLongue()
            }
            class Fronde extends Arme
            {
                +<<create>> Fronde()
            }
            class MasseArme extends Arme
            {
                +<<create>> MasseArme()
            }
            class Rapiere extends Arme
            {
                +<<create>> Rapiere()
            }

        }

        package armure
        {
            class Armure extends doonjonEtDragon.equipement.Equipement
            {
                +m_isLourde : boolean
                +m_classArmure : Integer
                +<<create>> Armure(nom : String, classArmure : Integer,isLourde : boolean)
                +getIsLourde : boolean
                +getClassArmure : Integer

            }
            class ArmureEcaille extends Armure
            {
                +<<create>> ArmureEcaille()
            }
            class CoteDeMaille extends Armure
            {
                +<<create>> CoteDeMaille()
            }
            class DemiPlate extends Armure
            {
                +<<create>> DemiPlate()
            }
            class Harnois extends Armure
            {
                +<<create>> Harnois()
            }
        }

        abstract class Equipement
        {
            -nom
            +<<create>> Equipement(nom : String)
            +getNom() : String
        }

    }
    package jeux
    {
        class De
        {
            -m_nbFace : Integer
            -m_nbDe : Integer
            +<<create>> De(nbFace : integer, nbDe : integer)
            +LancerDe()
            +UnDeQuatre
            +UnDeSix
            +UnDeHuit
            +UnDeDix
            +UnDeVingt
            +QuatreDeQuatre
        }

        class MaitreduJeu
        {
            +<<create>> MaitreduJeu()
            +giveStatJoueur(p:Personnage)
            +giveStatMonstre(m:Monstre)
            +DeplacerEntite(e : Entite,c : String, d : Donjon)
            +ConvertCoord(coord : string) : Integer
            +AjoutObstacle(d : Donjon)
        }

        class Tour
        {
            +<<create>> Tour(entities : List<Entities>,donjon : Donjon,personnages : List<personnages>)
            +startGame()
            +rollInitiative()
            +checkGameEnd
        }
    }
    package mapJeux
    {
        enum TypeDonjon
        {
            DONJON1
            DONJON2
            DONJON3
        }
        class Donjon
        {
            -grille : String[][]
            -largeur : integer
            -hauteur : integer
            -{static}Contexte : String[]
            -indexDonjon : integer
            -InitialiserGrilleVide()
            +<<create>> Donjon(largeur : integer,hauteur : integer)
            +setPersonnage(listP : List<Personnage>)
            +setEntite(ListE : List<Entite>)
            +CreeDonjonParDefaut(type : TypeDonjon)
            -{static}CreeDonjon1()
            -{static}CreeDonjon2()
            -{static}CreeDonjon3()
            +ajouterObstacle(x : integer,y : integer)
            -AjouterEquipement(e : Equipement , x : integer,y : integer)
            -ajouterMonstre(m : Monstre, x : integer, y : integer)
            +placerEntite(e : Entite, symbole : char)
            +EstDansGrille(int x, int y) : boolean
            +placerJoueurs(personnages : List<Personnage>)
            +afficherDonjon()
            +getObstacles() : List<Obstacle>
            +getObjetAuSol() : List<ObjetAuSol>
            +getMonstres() : List<Monstre>
            +getGrille() : string[][]
            +getContexte() : String
            +getEntiteAt(int x,int y) : Entite
            +getPersonnageAt(x : integer , y : integer) : Personnage
            +getArmeAt(x : integer,y : integer) : Arme
            +retirerArme(arme : Arme)
            +getArmureAt(x : integer,y : integer)
            +retirerArmure(armure : Armure)
        }

        class ObjetAuSol
        {
            -x : integer
            -y : integer
            +getX() : integer
            +getY() : integer
            +getEquipement : Equipement
        }

        class Obstacle
        {
            -x : integer
            -y : integer
            +getX() : integer
            +getY() : integer
        }
    }
    package race
    {
        class Race
        {
           +appliquerBonusStat(p : personnage)
           getM_nom() : String
        }

        class Nain implements Race
        {
            -m_nom : String
            +appliquerBonusStat(p : personnage)
            +getM_nom() : String
        }

        class Humain implements Race
        {
            -m_nom : String
            +appliquerBonusStat(p : personnage)
            +getM_nom() : String
        }

        class Halflin implements Race
        {
            -m_nom : String
            +appliquerBonusStat(p : personnage)
            +getM_nom() : String
        }

        class Elfe implements Race
        {
            -m_nom : String
            +appliquerBonusStat(p : personnage)
            +getM_nom() : String
        }
    }

    package sort
    {
        class Sort
        {
            +<<Create>> Sort()
            +ArmeMagique(p : Personnage,int index)
            -AmelioreStat(arme : Arme)
            +BoogieWoogie(e1 : entite, e2 : entite, d : Donjon)
            +Guerison(p:Personnage)
        }
    }

}

Personnage ..> Classe : use
Personnage ..> Race : use
Personnage ..> Arme : use
Personnage ..> Armure : use
Personnage ..> Donjon : use
Entite ..> Donjon : use
Sort ..> Personnage : use
Sort ..> Arme : use
Sort ..> Entite : use
Sort ..> Donjon : use
MaitreduJeu ..> Personnage : use
MaitreduJeu ..> Monstre : use
MaitreduJeu ..> Entite : use
MaitreduJeu ..> Donjon : use
Tour ..> Entite : use
Tour ..> Donjon : use
Tour ..> Personnage : use
Donjon ..> Personnage : use
Donjon ..> Entite : use
Donjon ..> Arme : use
Donjon ..> Armure : use
ObjetAuSol ..> Equipement : use
Race ..> Personnage : use


@enduml
