@startuml
skinparam style strictuml
left to right direction
skinparam linetype ortho
hide empty members

package doonjonEtDragon
{
    package classe
    {
        enum TypeClasse{
            CLERC
            GUERRIER
            MAGICIEN
            ROUBLARD
        }
        interface Classe{
            +DefinirCaracsBase(p:Personnage)
            +getType() : TypeClasse
            +ToString() : String
        }

        class Guerrier implements Classe{
            +DefinirCaracsBase(p:Personnage)
            +getType() : TypeClasse
            +ToString() : String
        }
        class Clerc implements Classe{
            +DefinirCaracsBase(p:Personnage)
            +getType() : TypeClasse
            +ToString() : String
        }
        class Magicien implements Classe{
            +DefinirCaracsBase(p:Personnage)
            +getType() : TypeClasse
            +ToString() : String
        }
        class Roublard implements Classe{
            +DefinirCaracsBase(p:Personnage)
            +getType() : TypeClasse
            +ToString() : String
        }
    }
    package entite
    {
        package monstre
        {
            abstract class Monstre extends doonjonEtDragon.entite.Entite
            {
                -m_espece : String
                -m_classeArmure : Integer
                -m_porteAttaque : Integer
                -m_num : Integer
                -+<<create>> Monstre(num : Integer, force : Integer,dexterite : Integer,initiative : Integer,pv : Integer, classArmure : Integer, porteAttaque : Integer,vitesse : Integer,typeE : TypeEntite)
                +getClassArmure() : Integer
                +getDamage() : De
                +setDamage(damage : De)
                +getNum() : Integer
                +getPorteAttaque : Integer
                +getEspece : String
                +setEspece(espece : String)
                +RecevoirAttaqueDe(p:Personnage,degat : Integer)
                +RecevoirAttaqueDe(m:Monstre,degat : Integer)
                +attaquer(cible : Entite)
                +estVivant() : boolean
                +ToString() : String

            }
            class Bowser extends Monstre
            {
                +<<create>> Bowser(num : Integer)
                +ToString() : String

            }
            class Dragon extends Monstre
            {
                +<<create>> Dragon(num : Integer)
                +ToString() : String

            }
        }

        package personnage
        {
            class Personnage extends doonjonEtDragon.entite.Entite
            {
                -m_nom : String
                -m_pvInitial
                -m_isMagicien : boolean
                -m_isClerc : boolean
                +<<create>> Personnage(nom : String, race : Race ,classe : Classe,symbole : String)
                +loadState()
                +setSort(sort : Sort)
                +getSort() : Sort
                +getPvInitial() : integer
                +IsMagicien : boolean
                +isClerc : boolean
                +getM_inventaireArme() : Arme[*]
                +getM_inventaireArmure() : Armure[*]
                +getM_nom() : String
                +getM_ArmeEquipe : Arme
                +LoadStatArmeEquipe()
                +getBonusArme() : integer
                +getDegatArme() : integer
                +EquiperArme(arme : Arme)
                +EquiperArmure(armure : Armure)
                +getNomArmeEquipee : String
                +getNomArmureEquipee : String
                +RamasserObjetsAuSol(x : Integer, y : Integer, donjon : Donjon)
                +Ramasser(arme : Arme)
                +Ramasser(armure : Armure)
                +EquiperObjetParNom(nomObjet : string)
                +getArmureEquipe() : Armure
                +RecevoirAttaqueDe(p : Personnage,degat : Integer)
                +RecevoirAttaqueDe(m : Monstre, degat : Integer)
                +attaquer (e : Entite)
                +infoEntite(e : Entite)
                +estVivant() : boolean
                +AfficheInventaire()
                +ToString() : String


            }
        }

        abstract Class Entite
        {
            -m_pv : Integer
            -m_force : Integer
            -m_dexterite : Integer
            -m_vitesse : Integer
            -m_initiative : Integer
            -m_x : Integer
            -m_y : Integer
            -m_TypeEntite
            #m_symbole : String
            +<<create>> Entite()
            +<<create>> Entite(pv : integer, force : integer, dex : integer, vit : integer, init : integer,symbole : char)
            +setPv(pv : Integer)
            +setForce(force : Integer)
            +setDexterite(dexterite : Integer)
            +setVitesse(vitesse :Integer)
            +setInitiative(initiative : Integer)
            +setSymbole(symbole : String)
            +setX()
            +setY()
            +getPv() : Integer
            +getForce() : Integer
            +getDexterite() : Integer
            +getVitesse() : Integer
            +getInitiative() : Integer
            +getDe() : De
            +getX() : Integer
            +getY() : Integer
            +distance(x : Integer,y : Integer)
            +ConvertCoords(coord : String)
            +{abstract}RecevoirAttaqueDe(p : Personnage,degat : Integer)
            +{abstract}RecevoirAttaqueDe(m : Monstre, degat : Integer)
            +{abstract}attaquer (e : Entite)
            +{abstract}infoEntite(e : Entite)
            +{abstract}estVivant() : boolean
            +estunPersonnage() : TypeEntite
            +estUnMonstre() : TypeEntite
            +seDeplacer(c : String,donjon : Donjon)
            +seDeplacer(c : String,donjon : Donjon)

        }

        enum TypeEntite
        {
            PERSONNAGE
            MONSTRE
        }
    }
    package equipement
    {
        package arme
        {
            class Arme extends doonjonEtDragon.equipement.Equipement
            {
            -m_porte : Integer
            -m_isGuerre : Integer
            +<<create>> Arme(nom : String,degat : De,porte : Integer,isGuerre : boolean)
            +getM_degats() : De
            +getM_porte : Integer
            +getM_nom : String
            +getM_isGuerre : Boolean
            +getTypeEquipement() : TypeEquipement
            }
            class ArbaleteLegere extends Arme
            {
                +<<create>> ArbaleteLegere()
                +ToString() : String
            }
            class ArcCourt extends Arme
            {
                +<<create>> ArcCourt()
                +ToString(): String

            }
            class Baton extends Arme
            {
                +<<create>> Baton()
                +ToString() : String

            }
            class EpeeLongue extends Arme
            {
                +<<create>> EpeeLongue()
                +ToString() : String

            }
            class Fronde extends Arme
            {
                +<<create>> Fronde()
                +ToString() : String

            }
            class MasseArme extends Arme
            {
                +<<create>> MasseArme()
                 +ToString() : String

            }
            class Rapiere extends Arme
            {
                +<<create>> Rapiere()
                +ToString() : String

            }

        }

        package armure
        {
            class Armure extends doonjonEtDragon.equipement.Equipement
            {
                +m_isLourde : boolean
                +m_classArmure : Integer
                +<<create>> Armure(nom : String, classArmure : Integer,isLourde : boolean)
                +getIsLourde : boolean
                +getClassArmure : Integer
                +getTypeEquipement() : TypeEquipement

            }
            class ArmureEcaille extends Armure
            {
                +<<create>> ArmureEcaille()
                +ToString() : String

            }
            class CoteDeMaille extends Armure
            {
                +<<create>> CoteDeMaille()
                +ToString() : String

            }
            class DemiPlate extends Armure
            {
                +<<create>> DemiPlate()
                +ToString() : String

            }
            class Harnois extends Armure
            {
                +<<create>> Harnois()
                +ToString() : String

            }
        }

        abstract class Equipement
        {
            -nom : String
            +<<create>> Equipement(nom : String)
            +getNom() : String
            +{abstract} getTypeEquipement : TypeEquipement
        }

        enum TypeEquipement
        {
            ARME
            ARMURE
        }

    }
    package jeux
    {
        class De
        {
            -m_nbFace : Integer
            -m_nbDe : Integer
            +<<create>> De(nbFace : integer, nbDe : integer)
            +LancerDe() :  Integer
            +UnDeQuatre() :  Integer
            +UnDeSix() :  Integer
            +UnDeHuit() :  Integer
            +UnDeDix() :  Integer
            +UnDeVingt() :  Integer
            +QuatreDeQuatre() :  Integer
            +ToString() : String
        }

        class MaitreduJeu
        {
            +<<create>> MaitreduJeu()
            +giveStatJoueur(p:Personnage)
            +giveStatMonstre(m:Monstre)
            +DeplacerEntite(e : Entite,c : String, d : Donjon)
            +ConvertCoord(coord : string) : Integer
            +AjoutObstacle(d : Donjon)
            +CreeDonjonCustom(personnageExistant : Personnage[*])
            +LireEntier(scanner : Scanner,message : String,min : integer, max : integer)
            +CreePersonnage(scanner : Scanner)
            -getRaceByChoice(integer : Choix) : Race
            -getClasseByChoice(choix : integer) : Race
            -CreeArmeIndex(choix : integer) : Arme
            -CreeArmureParIndex(nom : integer) : Armure
            -CreeMonstreParIndex(nom : integer) : Monstre
        }

        class Tour {
          +<<create>> Tour(entities : List<Entities>, donjon : Donjon, personnages : Personnage[*])
          +start()
          +rollInitiative()
          +checkGameEnd() : boolean
          +tourMaitreDuJeu(scanner : Scanner, toRemove : Entite[*])
          +afficherMessageFinJeu()

          -gererTourPersonnage(joueur : Personnage, scanner : Scanner, toRemove : Entite[*])
          -executerCommandeJoueur(cmd : String, parts : String[], joueur : Personnage, scanner : Scanner, toRemove : Entite[*]) : int
          -gererTourMonstre(monstre : Monstre, scanner : Scanner)
          -afficherCommandes(joueur : Personnage, actionsRestantes : int)
          -gererMort(e : Entite, toRemove : Entite[*])
          -gererSortAm(joueur : Personnage, parts : String[], scanner : Scanner) : int
          -gererSortBoogieWoogie(joueur : Personnage, parts : String[]) : int
          -gererSortGuerison(joueur : Personnage, parts : String[]) : int
        }

    }
    package mapJeux
    {
        enum TypeDonjon
        {
            DONJON1
            DONJON2
            DONJON3
        }
        class Donjon
        {
            -grille : String[][]
            -largeur : integer
            -hauteur : integer
            -{static}Contexte : String[]
            -indexDonjon : integer
            -InitialiserGrilleVide()
            +<<create>> Donjon(largeur : integer,hauteur : integer)
            +setPersonnage(listP : Personnage[*])
            +setEntite(ListE : Entite[*])
            +{static}CreeDonjonParDefaut(type : TypeDonjon)
            -{static}CreeDonjon1()
            -{static}CreeDonjon2()
            -{static}CreeDonjon3()
            +ajouterObstacle(x : integer,y : integer)
            +estObstacleAffichage() : boolean
            +estEquipementAffichage() : boolean
            +estCaseLibre() : boolean
            -AjouterEquipement(e : Equipement , x : integer,y : integer)
            -AjouterEntite(e : Entite)
            -ajouterMonstre(m : Monstre, x : integer, y : integer)
            +placerEntiteRandom(e : Entite, symbole : char)
            +EstDansGrille(int x, int y) : boolean
            +placerJoueurs(personnages : Personnage[*])
            +afficherDonjon()
            +getObstacles() : Obstacle[*]
            +getObjetAuSol() : ObjetAuSol[*]
            +getMonstres() : Monstre[*]
            +getGrille() : string[][]
            +getContexte() : String
            +getEntiteAt(int x,int y) : Entite
            +getPersonnageAt(x : integer , y : integer) : Personnage
            +getArmeAt(x : integer,y : integer) : Arme
            +retirerArme(arme : Arme)
            +getArmureAt(x : integer,y : integer)
            +retirerArmure(armure : Armure)
            +enleverEntite(e : Entite)
        }

        class ObjetAuSol
        {
            -x : integer
            -y : integer
            +getX() : integer
            +getY() : integer
            +getEquipement : Equipement
            +EstTypeEquipement : boolean
            +toString() : String
        }

        class Obstacle
        {
            -x : integer
            -y : integer
            +getX() : integer
            +getY() : integer
        }
    }
    package race
    {
        class Race
        {
           +appliquerBonusStat(p : personnage)
           getM_nom() : String
        }

        class Nain implements Race
        {
            -m_nom : String
            +appliquerBonusStat(p : personnage)
            +getM_nom() : String
        }

        class Humain implements Race
        {
            -m_nom : String
            +appliquerBonusStat(p : personnage)
            +getM_nom() : String
        }

        class Halflin implements Race
        {
            -m_nom : String
            +appliquerBonusStat(p : personnage)
            +getM_nom() : String
        }

        class Elfe implements Race
        {
            -m_nom : String
            +appliquerBonusStat(p : personnage)
            +getM_nom() : String
        }
    }

    package sort
    {
        class Sort
        {
            +<<Create>> Sort()
            +ArmeMagique(p : Personnage,int index)
            -AmelioreStat(arme : Arme)
            +BoogieWoogie(e1 : entite, e2 : entite, d : Donjon)
            +Guerison(p:Personnage)
        }
    }

    class Main
    {
         +main(args : String[]) : void
    }

}


Main ..> MaitreduJeu : use
Main ..> Personnage : instantiate
Main ..> Donjon : instantiate
Main ..> Tour : use


Personnage ..> Classe : use
Personnage ..> Race : use
Personnage ..> Arme : use
Personnage ..> Armure : use
Personnage ..> Donjon : use
Entite ..> Donjon : use
Sort ..> Personnage : use
Sort ..> Arme : use
Sort ..> Entite : use
Sort ..> Donjon : use
MaitreduJeu ..> Personnage : use
MaitreduJeu ..> Monstre : use
MaitreduJeu ..> Entite : use
MaitreduJeu ..> Donjon : use
Tour ..> Entite : use
Tour ..> Donjon : use
Tour ..> Personnage : use
Donjon ..> Personnage : use
Donjon ..> Entite : use
Donjon ..> Arme : use
Donjon ..> Armure : use
ObjetAuSol ..> Equipement : use
Race ..> Personnage : use


classe ..> Personnage : call
classe ..> sort : call
Personnage ..> classe : call
Personnage ..> race : call
Personnage ..> equipement : call
MaitreduJeu ..> Entite : call
MaitreduJeu ..> Obstacle : call
MaitreduJeu ..> Donjon: call
MaitreduJeu ..> race : call
MaitreduJeu ..> classe : call
Tour ..> Donjon : call
Tour ..> entite : call
Tour ..> MaitreduJeu : call
Tour ..> Sort : call
Donjon ..> entite : call
Donjon ..> equipement : call
Donjon ..> TypeDonjon : uses
Race ..> Personnage : call
Sort ..> Personnage : call

arme ..> TypeEquipement : instantiate
armure ..> TypeEquipement : instantiate
classe ..> TypeClasse : instantiate



Entite     "1" *-[#bbbbbb,plain]-> "m_de\n1" De
Entite     "1" *-[#bbbbbb,plain]-> "m_TypeEntite\1" TypeEntite


Personnage "1" *-[#bbbbbb,plain]-> "m_inventaireArme\n*" Arme
Personnage "1" *-[#bbbbbb,plain]-> "m_TypeClasse\n1" TypeClasse
Personnage "1" *-[#bbbbbb,plain]-> "m_inventaireArmure\n*" Armure
Personnage "1" *-[#bbbbbb,plain]-> "m_classe\n1" Classe
Personnage "1" *-[#bbbbbb,plain]-> "m_ArmureEquipe\n1" Armure
Personnage "1" *-[#bbbbbb,plain]-> "m_ArmeEquipe\n1" Arme
Personnage "1" *-[#bbbbbb,plain]-> "m_sort\n1" Sort
Personnage "1" *-[#bbbbbb,plain]-> "m_degatArme\n1" De

Arme       "1" *-[#bbbbbb,plain]-> "m_degat\n1" De

Tour "1" *-[#bbbbbb,plain]-> "m_entities\n*" Entite
Tour "1" *-[#bbbbbb,plain]-> "m_personnage\n*" Personnage
Tour "1" *-[#bbbbbb,plain]-> "m_donjon\n1" Donjon
Tour "1" *-[#bbbbbb,plain]-> "m_mj\n1" MaitreduJeu

Donjon     "1" *-[#bbbbbb,plain]-> "m_monstres\n*" Monstre
Donjon     "1" *-[#bbbbbb,plain]-> "m_objetsAuSol\n*" ObjetAuSol
Donjon     "1" *-[#bbbbbb,plain]-> "m_obstacles\n*" Obstacle
Donjon     "1" *-[#bbbbbb,plain]-> "m_personnages\n*" Personnage
Donjon     "1" *-[#bbbbbb,plain]-> "m_entities\n*" Entite

ObjetAuSol "1" *-[#bbbbbb,plain]-> "m_equipement\n1" Equipement


@enduml
